#include <iostream>
#include <fstream>
#include <format>
void phelp(Node* p, int i, std::ofstream& fout) {
	if (p->color == 1) fout << std::format("{} [label={},style=filled,color=red];\n", i, p->data);
	else fout << std::format("{} [label={}];\n", i, p->data);
	fout << std::format("{}->{}\n", i, 2 * i + 1);
	if (p->left != TNULL) {
		phelp(p->left, 2 * i + 1, fout);
	}
	else {
		fout << std::format("{} [label={},style=filled,color=white];\n", 2 * i + 1, "\"\"");
	}
	fout << std::format("{}->{}\n", i, 2 * i + 2);
	if (p->right != TNULL) {
		phelp(p->right, 2 * i + 2, fout);
	}
	else {
		fout << std::format("{} [label={},style=filled,color=white];\n", 2 * i + 2, "\"\"");
	}
}
void print_to_ostream() {
	std::ofstream fout("1.txt");
	fout << "digraph G {\n";
	phelp(root, 0, fout);
	fout << "}";
	fout.close();
}
bool check_cnt() {
	return check(root);
}
size_t get_els(RedBlack::Node<T>* p) {
	if (p == TNULL) return 0;
	return get_els(p->left) + get_els(p->right) + 1;
}
bool check(RedBlack::Node<T>* p) {
	if (p == TNULL) return 1;
	if (get_els(p->left) != p->cnt) return 0;
	return check(p->right);
}
//RedBlack::Node<T>* node;
/*y = RedBlack::find_min(z->right, TNULL);
node = y;
while (node->parent != z) {
	if (node == node->parent->left) node->parent->cnt--;
	node = node->parent;
}*/